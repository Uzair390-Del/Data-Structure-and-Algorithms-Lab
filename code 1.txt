#include <iostream>
using namespace std;

class ArrayOperations {
private:
    int arr[10]; // Fixed size array of 10 elements
    int size = 10; // Fixed size

public:
    ArrayOperations() {
        // Initialize array with default values (1 to 10)
        for (int i = 0; i < size; i++) {
            arr[i] = i + 1;
        }
    }

    // Function to display the array
    void display() {
        cout << "Array: ";
        for (int i = 0; i < size; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }

    // Function to insert an element at a specific position
    void insertElement(int element, int position) {
        if (position < 0 || position > size) {
            cout << "Invalid position!" << endl;
            return;
        }

        // Shift elements to the right to make space for the new element
        for (int i = size - 1; i > position; i--) {
            arr[i] = arr[i - 1];
        }

        arr[position] = element;
        cout << "Inserted " << element << " at position " << position << endl;
    }

    // Function to delete an element from a specific position
    void deleteElement(int position) {
        if (position < 0 || position >= size) {
            cout << "Invalid position!" << endl;
            return;
        }

        // Shift elements to the left to fill the gap
        for (int i = position; i < size - 1; i++) {
            arr[i] = arr[i + 1];
        }

        arr[size - 1] = 0; // Set the last element to 0
        cout << "Deleted element at position " << position << endl;
    }

    // Function to search for an element
    int searchElement(int element) {
        for (int i = 0; i < size; i++) {
            if (arr[i] == element) {
                return i;
            }
        }
        return -1; // Element not found
    }
};

int main() {
    ArrayOperations arrayOps;

    // Display the initial array
    arrayOps.display();

    // Test inserting an element
    arrayOps.insertElement(99, 4);
    arrayOps.display();

    // Test deleting an element
    arrayOps.deleteElement(2);
    arrayOps.display();

    // Test searching for an element
    int element = 99;
    int pos = arrayOps.searchElement(element);
    if (pos != -1) {
        cout << "Element " << element << " found at position " << pos << endl;
    } else {
        cout << "Element " << element << " not found!" << endl;
    }

    return 0;
}
"https://www.scaler.in/difference-between-primitive-and-non-primitive-data-structure/"
https://www.scholarhat.com/tutorial/datastructures/what-are-data-structures-types-of-data-structures